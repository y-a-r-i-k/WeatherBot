import requests
import datetime
from pprint import pprint
from aiogram import Bot, Dispatcher, executor, types

import cfg

bot = Bot(token=cfg.BOT_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['city'])
async def start_command(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∞ —è –Ω–∞–ø–∏—à—É —Ç–µ–±–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.")
    print(f"{message.from_user.id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}")



@dp.message_handler()
async def get_weather(message: types.Message):

    code_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F38B"
    }

    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={cfg.Weather_KEY}&units=metric"
        )

        data = r.json()
        pprint(data)


        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_des = data["weather"][0]["main"]
        if weather_des in code_smile:
            wd = code_smile[weather_des]

        else:
            wd = f'Weather code: {data["weather"][0]["main"]}'

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) \
              - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

        await message.reply(f"""
*****{datetime.datetime.now().strftime("%Y-%m-%d %H:%M")}*****
===============================

üëâ –ì–æ—Ä–æ–¥: {city}
---> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} –°¬∞ {wd}
---> –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {humidity} %
---> –î–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞: {pressure} –º–º.—Ä—Ç.—Å—Ç
---> –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å
---> –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞: {sunrise}
---> –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞: {sunset}
---> –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è: {day}

===============================
***–£–¥–∞—á–∏!***
""")

    except Exception as ex:
        await message.reply(" \U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. \U00002620")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)